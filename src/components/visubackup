  import {Table, Alert, Panel, Well, ListGroupItem, ListGroup, ButtonToolbar, ButtonGroup, Button, Glyphicon} from 'react-bootstrap';
import { fetchDevicesList } from '../actions/sensingDeviceActions'
import { NavLink } from 'react-router'
    //var browserHistory = ReactRouter.browserHistory;
  for (var measurementId in this.state.historicalData) {   
      //const data = this.state.historicalData[measurementId];
      const unit = this.state.sensor[measurementId]["metadata"]["unit"]? this.state.sensor[measurementId]["metadata"]["unit"]["value"]: "";
      //const unit = 'cm';
      const YAxisLabel = measurementId + '(' + unit + ')';
      var visComp = [<CardText> Historical data is not available for {YAxisLabel}. </CardText>]
      if (this.state.historicalData[measurementId].length > 0) {
        //console.log("There are some data for " + measurementId + " " + JSON.stringify(this.state.historicalData[measurementId]));
        var title = 'Historical data graph for ' + measurementId;
        visComp = [<CardTitle title={title} /> ]
        var visComp2 = [
          <CardText>
          <LineChart width={1400} height={800} data={this.state.historicalData[measurementId]} margin={{ top: 40, right: 40, bottom: 25, left: 50 }}>
            <Line type="monotone" fill="#8884d8" dataKey="value" stroke="#8884d8" dot={{ stroke: 'red', strokeWidth: 5 }} activeDot={{ stroke: 'yellow', strokeWidth: 8, r: 10 }} label={{ fill: 'red', fontSize: 20 }} name={measurementId} />
            <CartesianGrid stroke="#ccc" strokeDasharray="3 3" />
            <XAxis dataKey="time" padding={{ left: 30, right: 20 }} label="Time" name="Date" />
            <YAxis dataKey="value" padding={{ left: 20, right: 20, bottom: 40}} label={YAxisLabel} name={measurementId} />
            <Tooltip />
            (measurementId === 'SM1' || measurementId === 'SM2')? <ReferenceLine y={200} label="WET" padding={{ left: 10, right: 10 }} stroke="blue"/>
              <ReferenceLine y={1000} label="DRY" padding={{ left: 10, right: 10 }} stroke="red"/>
              : ;
          </LineChart>
        </CardText>]
        visComp = visComp.concat(visComp2);
      }
      visCompAll = visCompAll.concat(visComp);
    }
   <div className="sensor">
        <h1 className="page-title">Sensor: {this.state.id}</h1>
        <Container fluid={true}>
          <Card>
            <CardTitle title="Sensor Location" />
            <CardMedia>
              <Map ref="map" center={position} zoom={8}>
                <TileLayer
                  url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'
                  attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
                />
                {listMarkers}
              </Map>
            </CardMedia>
            <CardTitle title="Current Values" />
            <CardText>
              <List>
                {UTIL.getMeasurements(this.state.sensor).map((itemID) => {
                  return (
                    <ListItem primaryText={itemID.key + ": " + itemID.value} />
                  )
                })}
                <ListItem primaryText={"Date created: " + this.state.dateCreated} />
                <ListItem primaryText={"Date modified: " + this.state.dateModified} />
                <ListItem primaryText={"Service path: " + this.state.servicePath} />
              </List>
            </CardText>
            <CardTitle title="Historical Data" />
            {visCompAll}
          </Card>
        </Container>
      </div>